define(["./database-module"],function(){describe("database inflate",function(){var e,t,n=jasmine.createSpy("query");beforeEach(module("database",function(e){e.value("databaseQuery",n)})),beforeEach(inject(function(r,i){e=function(e,s){var o=new i(s||[]);n.andCallFake(function(){return o.next()}),t=r(e,o,null)}})),it("should be fine when there is no inheritance",function(){e({}),expect(t).toEqual({})}),it("should throw an error ",function(){e({}),expect(t).toEqual({})}),it("should run obj.customize function when there is no inheritance",inject(function(t){var n={global:"obj"},r=jasmine.createSpy("customize"),i={customize:r};t.global=n,e(i),expect(r).toHaveBeenCalledWith(i,n)})),it("should run obj.customize function when there is inheritance",inject(function(t){var n=jasmine.createSpy("customize"),r=jasmine.createSpy("later customize"),i={global:"obj"};t.global=i,e({inherit:!0},[{customize:n}]),expect(n).toHaveBeenCalledWith({inherit:!0,customize:n},i),e({inherit:!0,customize:n},[{customize:r}]),expect(n).toHaveBeenCalledWith({inherit:!0,customize:n},i),expect(r).not.toHaveBeenCalled()})),it("should return a copy, never the source",function(){var n;n={},e(n),expect(t).not.toBe(n),n={inherit:!0},e(n,[{a:1}]),expect(t).not.toBe(n)}),it("should recursively extend obj with the objects inherited by obj.inherit",function(){e({inherit:!0},[{a:1,inherit:!0},{b:1,inherit:!0},{c:1},{d:1}]),expect(t.a).toBeDefined(),expect(t.b).toBeDefined(),expect(t.c).toBeDefined(),expect(t.d).not.toBeDefined()}),it("should throw an error if depth exceeds 10",function(){expect(function(){e({inherit:!0},[{inherit:!0},{inherit:!0},{inherit:!0},{inherit:!0},{inherit:!0},{inherit:!0},{inherit:!0},{inherit:!0},{inherit:!0},{}])}).toThrow()}),it("should throw an exception if a query was not found",function(){expect(function(){e({inherit:!0},[])}).toThrow()}),it("should inherit keys from the parent",function(){var n={a:1,b:[1,2],c:{a:1}};e({inherit:!0},[n]),expect(t.a).toBe(n.a),expect(t.b).not.toBe(n.b),expect(t.b).toEqual(n.b),expect(t.c).not.toBe(n.c),expect(t.c).toEqual(n.c)}),it("should not inherit keys that the child has",function(){e({inherit:!0,a:1},[{a:2}]),expect(t.a).toBe(1)}),it("should not inherit keys that the child has even when they evaluate to false",function(){e({inherit:!0,a:undefined},[{a:2}]),expect(t.a).toBe(undefined)}),it("should extend data any way (child gets precedence)",function(){e({inherit:!0,data:{a:1}},[{data:{a:2,b:2}}]),expect(t.data.a).toBe(1),expect(t.data.b).toBe(2)})})});