define(["underscore","./database-module"],function(e){describe("Collection",function(){var t;beforeEach(module("database")),beforeEach(inject(function(e){t=new e})),it("should init a collection from a collection",inject(function(e){var n;t.add([1,2,3]),n=new e(t),expect(n instanceof e).toBeTruthy(),expect(n.collection).toEqual([1,2,3])})),it("should init with an array or without one",inject(function(e){var t,n=[1,2,3,4];t=new e(n),expect(t.collection).toBe(n),t=new e,expect(t.collection.length).toBe(0)})),it("should throw an error if initiated with a non Array/collection",inject(function(e){expect(function(){new e({})}).toThrow()})),it('should support "add"',function(){t.add(1),expect(t.collection.length).toBe(1),t.add([2,3]),expect(t.collection.length).toBe(3)}),it("should keep length updated",function(){expect(t.length).toBe(0),t.add(1),expect(t.length).toBe(1),t.add([2,3]),expect(t.length).toBe(3)}),it('should support "at"',function(){t.add([1,2,3]),expect(t.at(0)).toBe(1),expect(t.at(2)).toBe(3)}),it("should support navigating back and forth",function(){t.add([1,2,3,4]),expect(t.current()).toBe(undefined),expect(t.pointer).toBe(-1),expect(t.first()).toBe(1),expect(t.pointer).toBe(0),expect(t.next()).toBe(2),expect(t.pointer).toBe(1),expect(t.previous()).toBe(1),expect(t.pointer).toBe(0),expect(t.current()).toBe(1),expect(t.last()).toBe(4),expect(t.pointer).toBe(3),expect(t.end()).toBe(undefined),expect(t.pointer).toBe(4)}),it("should inherit cool underscore functions",function(){e(["where","filter"]).each(function(e){expect(t[e]).toEqual(jasmine.any(Function))})}),it("should support _.filter",function(){t.add([1,2,3,4,5]);var e=t.filter(function(e){return e>2});expect(e.collection).toEqual([3,4,5])})})});