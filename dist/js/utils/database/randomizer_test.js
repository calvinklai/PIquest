define(["./database-module"],function(){var e,t={},n=jasmine.createSpy("random").andReturn(t),r=jasmine.createSpy("exRandom").andReturn([2,1,0]);describe("database Randomizer",function(){beforeEach(module("database")),beforeEach(module(function(e){e.value("randomizeInt",n),e.value("randomizeRange",r)})),beforeEach(inject(function(t){n.reset(),r.reset(),e=new t})),describe(": random",function(){it("should return the result of the random generator",function(){var n=e.random();expect(n).toBe(t)}),it("should randomize each time it is called",function(){e.random(),e.random(),expect(n.callCount).toBe(2)}),it("should not randomize when repeat is true",function(){e.random(null,"seed",!1),e.random(null,"seed",!0),expect(n.callCount).toBe(1)}),it("should randomize when repeat is true, if the seed was not created yet",function(){e.random(null,"seed",!0),expect(n.callCount).toBe(1)}),it("should randomize seperately for each seed",function(){e.random(null,"seed1",!0),e.random(null,"seed2",!0),expect(n.callCount).toBe(2)})}),describe(": sequential",function(){it("should return the next number",function(){expect(e.sequential(3,"seed")).toBe(0),expect(e.sequential(3,"seed")).toBe(1)}),it("should return the current number if repeat = true",function(){expect(e.sequential(3,"seed",!1)).toBe(0),expect(e.sequential(3,"seed",!0)).toBe(0)}),it("should repeat when exceeding length",function(){expect(e.sequential(2,"seed")).toBe(0),expect(e.sequential(2,"seed")).toBe(1),expect(e.sequential(2,"seed")).toBe(0)}),it("should allow multiple seeds",function(){expect(e.sequential(2,"seed1")).toBe(0),expect(e.sequential(2,"seed2")).toBe(0),expect(e.sequential(2,"seed1")).toBe(1)}),it("should go bannans if the length does not fit the collection",function(){expect(function(){e.sequential(3,"seed"),e.sequential(4,"seed")}).toThrow()})}),describe(": exRandom",function(){it("should return the next number",function(){expect(e.exRandom(3,"seed")).toBe(2),expect(e.exRandom(3,"seed")).toBe(1)}),it("should return the current number if repeat = true",function(){expect(e.exRandom(3,"seed",!1)).toBe(2),expect(e.exRandom(3,"seed",!0)).toBe(2)}),it("should re-randomize when exceeding length",function(){e.exRandom(3,"seed"),e.exRandom(3,"seed"),e.exRandom(3,"seed"),e.exRandom(3,"seed"),expect(r.callCount).toBe(2)}),it("should allow multiple seeds",function(){e.exRandom(3,"seed1"),e.exRandom(3,"seed2"),expect(r.callCount).toBe(2)}),it("should go bannans if the length does not fit the collection",function(){expect(function(){e.exRandom(3,"seed"),e.exRandom(4,"seed")}).toThrow()})})})});