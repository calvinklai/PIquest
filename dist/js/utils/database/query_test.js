define(["./database-module"],function(){var e;describe("database query",function(){var t,n=[{set:1,data:{val:1,other:"value"}},{set:1,data:{val:2}},{set:2,data:{val:3}},{set:2,data:{val:4}}],r;beforeEach(module("database")),beforeEach(module(function(){e=jasmine.createSpyObj("randomizer",["random","exRandom","sequential"]),e.random.andReturn(1),e.exRandom.andReturn(1),e.sequential.andReturn(1)})),beforeEach(inject(function(i){r=function(){t=i.apply(null,[arguments[0],n,e])}})),it("should support returning a random document",function(){r({}),expect(t).toBe(n[1])}),it("should support returning a random document by set",function(){r({set:2}),expect(t).toBe(n[3])}),it("should randomly pick from the appropriate set if the query is a string",function(){r(2),expect(t).toBe(n[3])}),it("should support querying by data:Obj",function(){e.random.andReturn(0),r({data:{val:1}}),expect(t).toBe(n[0]),r({data:{val:3}}),expect(t).toBe(n[2])}),it("should support querying by a data:Function",function(){e.random.andReturn(0),r({data:function(e){return e.data.val===3}}),expect(t).toBe(n[2])}),it("should throw an error if an object was not found",function(){expect(function(){r({set:18})}).toThrow()}),describe(": type randomization",function(){it("should allow using a custom function as a query",function(){var e={},i=jasmine.createSpy("dummy").andReturn(e);r(i),expect(t).toEqual(e),expect(i).toHaveBeenCalledWith(n)}),it("should support exRandom",function(){r({type:"exRandom"}),expect(e.exRandom).toHaveBeenCalled()}),it("should support sequential access",function(){r({type:"sequential"}),expect(e.sequential).toHaveBeenCalled()}),it("should support first and last",function(){r({type:"first"}),expect(t).toBe(n[0]),r({type:"last"}),expect(t).toBe(n[3])})})})});