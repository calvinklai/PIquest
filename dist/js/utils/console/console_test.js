define(["underscore","./consoleModule"],function(e){describe("piConsole",function(){beforeEach(module("piConsole")),describe(": prototype",function(){var t,n,r,i=["log","debug","info","warn","error"];beforeEach(inject(function(e){t=e.get("$log"),n=e.get("$rootScope"),r=e.get("piConsolePrototype")})),it("should have all five levels of loggers",function(){e.each(i,function(e){expect(r[e]).toEqual(jasmine.any(Function))})}),describe(": shouldLog",function(){it("should not log by default",function(){expect(r.shouldLog("none")).not.toBeTruthy()}),it("should always log if !!force",function(){r.force=!0,expect(r.shouldLog("none")).toBeTruthy()}),it("should respect level",function(){r.settings.tags="all",r.settings.level="info",expect(r.shouldLog("error")).toBeTruthy(),expect(r.shouldLog("warn")).toBeTruthy(),expect(r.shouldLog("info")).toBeTruthy(),expect(r.shouldLog("log")).not.toBeTruthy(),expect(r.shouldLog("debug")).not.toBeTruthy()}),it("should respect settings.tags (String)",function(){r.settings.tags="question",r.tags=["not question"],expect(r.shouldLog("error")).not.toBeTruthy(),r.tags=["question"],expect(r.shouldLog("error")).toBeTruthy()}),it("should respect settings.tags (Array)",function(){r.settings.tags=["question","manager"],r.tags=["not question"],expect(r.shouldLog("error")).not.toBeTruthy(),r.tags=["question"],expect(r.shouldLog("error")).toBeTruthy()}),it("should respect tags",function(){r.settings.tags=["bling","rocket"],r.tags=["bling"],expect(r.shouldLog("error")).toBeTruthy(),r.tags=["chiwawa"],expect(r.shouldLog("error")).not.toBeTruthy()}),it('should respect tags == "all"',function(){r.settings.tags="all",expect(r.shouldLog("error")).toBeTruthy()}),it('should treat tags as "all" by default',function(){expect(r.shouldLog("error")).toBeTruthy()})}),describe(": loggers",function(){beforeEach(function(){r.shouldLog=jasmine.createSpy("log").andReturn(!0)}),it("should $log all arguments",function(){var e=[1,2,3,4,5,6,7];r.log.apply(r,e),expect(t.log.logs[0]).toEqual(e)}),it("should not log if !shouldLog",function(){r.shouldLog.andReturn(!1),r.log("test"),t.assertEmpty()}),it("should broadcast log information",function(){r.tags=["tag1","tag2"];var e=jasmine.createSpy("log");n.$on("console:log",e),r.log("args1","args2"),n.$digest(),expect(e.mostRecentCall.args[1]).toEqual(jasmine.any(Object)),expect(e.mostRecentCall.args[1].type).toEqual("log"),expect(e.mostRecentCall.args[1].tags).toEqual(["tag1","tag2"]),expect(e.mostRecentCall.args[1].args).toEqual(["args1","args2"])}),it("should not broadcast if !!hideConsole",function(){r.settings.hideConsole=!0;var e=jasmine.createSpy("log");n.$on("console:log",e),r.log(!0),n.$digest(),expect(e).not.toHaveBeenCalled()})})}),describe("constructor",function(){var e,t;beforeEach(module(function(e){e.value("piConsolePrototype",t={})})),beforeEach(inject(function(t){e=t.get("piConsole")})),it("should prototypicaly inherit piConsolePrototype",function(){t.test={};var n=e(1,2);expect(n.test).toBe(t.test),expect(n.hasOwnProperty("test")).not.toBeTruthy()}),it("should set tags into itself (and make sure it is an array)",function(){var t;t=e(1),expect(t.tags).toEqual([1]),t=e([1,2]),expect(t.tags).toEqual([1,2])}),it("should set force into itself",function(){var t;t=e(1),expect(t.force).toBe(!1),t=e(1,1),expect(t.force).toBe(!0)}),it('should set "settings" correctly',function(){var t={};e.setSettings(t),expect(e(1).settings).toBe(t),expect(e(1).hasOwnProperty("settings")).not.toBeTruthy()})})})});