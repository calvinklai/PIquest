define(["underscore","./mixer-module","utils/randomize/randomizeModuleMock"],function(){describe("Mixer",function(){var e;describe("mixer",function(){beforeEach(module("mixer","randomizeMock")),beforeEach(inject(function(t){e=t})),it("should return any non mixer object as is",function(){expect(e(123)).toEqual([123]),expect(e([])).toEqual([[]]),expect(e({a:345})).toEqual([{a:345}])}),it("should throw an error if an unknow mixer is used",function(){expect(function(){e({mixer:"unknow"})}).toThrow()}),it("should throw an error if an undefined mixer is used",function(){expect(function(){e({mixer:undefined})}).toThrow()}),it("should keep the results in the mixer object `$parsed`",function(){var t=[];e.mixers.testFn=function(){return t};var n={mixer:"testFn"};expect(e(n)).toBe(t),expect(n.$parsed).toBe(t)}),it("should return `$parsed` unless remix = true",function(){e.mixers.testFn=function(){return 456},expect(e({mixer:"testFn",$parsed:123})).toBe(123),expect(e({mixer:"testFn",$parsed:123,remix:!0})).toBe(456)}),it("should repeat any data in a repeat n times",function(){expect(e({mixer:"repeat",times:"2",data:[1,2]})).toEqual([1,2,1,2])}),it("should return the data in a wrapper as is",function(){expect(e({mixer:"wrapper",data:[1,2]})).toEqual([1,2])}),it("should return the data in a random element randomized",function(){expect(e({mixer:"random",data:[1,2,3]})).toEqual([3,2,1])}),it("should choose n || 1 random elements",function(){expect(e({mixer:"choose",data:[1,2,3,4]})).toEqual([4]),expect(e({mixer:"choose",n:2,data:[1,2,3,4]})).toEqual([4,3])}),it("should know how to weightedRandom",inject(function(t){t.random=.5,expect(e({mixer:"weightedRandom",weights:[.2,.8],data:[1,2]})).toEqual([2]),t.random=.1,expect(e({mixer:"weightedRandom",weights:[.2,.8],data:[1,2]})).toEqual([1]),t.random=.9,expect(e({mixer:"weightedRandom",weights:[.2,.6,.2],data:[1,2,3]})).toEqual([3])}))}),describe(": mixerSequenceProvider",function(){function n(n){return e=new t(n)}function r(){return expect(e.current().test)}var e,t;beforeEach(module("mixer","randomizeMock")),beforeEach(inject(function(e){t=e})),it("should return plain elements",function(){n([{test:1}]).next(),r().toBe(1)}),it("should evaluate mixers",function(){n([{mixer:"wrapper",data:[{test:1}]}]).next(),r().toBe(1)}),it("should evaluate nested mixers",function(){n([{mixer:"wrapper",data:[{mixer:"wrapper",data:[{test:1}]}]}]).next(),r().toBe(1)}),it("should support (nested) going back",function(){n([{test:0},{mixer:"wrapper",data:[{mixer:"wrapper",data:[{test:1},{test:2}]},{test:3}]},{test:4}]).next().next().next().next().next(),r().toBe(4),e.prev(),r().toBe(3),e.prev(),r().toBe(2),e.prev(),r().toBe(1),e.prev(),r().toBe(0)}),it("should remix when needed",function(){var t={global:{flag:!0}};n([{mixer:"branch",conditions:[{compare:"global.flag",to:!0}],data:[{test:1}],elseData:[{test:2}]},{mixer:"branch",remix:!0,conditions:[{compare:"global.flag",to:!0}],data:[{test:3}],elseData:[{test:4}]}]),e.next(t),r().toBe(1),e.next(t),r().toBe(3),t.global.flag=!1,e.prev(t),r().toBe(1),e.next(t),r().toBe(4)}),it("should return undefined when the sequence is done",function(){n([{}]).next().next(),expect(e.current()).not.toBeDefined()}),it("should allow going back after a sequence is finished",function(){n([{}]).next().next().prev(),expect(e.current()).toBeDefined()}),it("should mark the elements with $meta",function(){var t;n([{mixer:"wrapper",data:[{},{}]},{}]).next(),t=e.current().$meta,expect(t.number).toBe(1),expect(t.outOf).toBe(3),t=e.next().next().current().$meta,expect(t.number).toBe(3),expect(t.outOf).toBe(2)})}),describe(": mixerSequential",function(){var e,t={},n={mixer:1},r={mixer:2},i={mixer:3},s=jasmine.createSpy("mixer").andCallFake(function(e){if(e==n)return["a","b"];if(e==r)return[n,1];if(e==i)return[i]});beforeEach(module("mixer",function(e){e.value("mixer",s)})),beforeEach(inject(function(t){e=t,s.reset()})),it("should mix the first element",function(){e([n],t),expect(s).toHaveBeenCalledWith(n,t)}),it("should replace first element with the mixed array",function(){expect(e([n,2])).toEqual(["a","b",2])}),it("should mix recursively",function(){expect(e([r,2])).toEqual(["a","b",1,2])}),it("should break recursion when mixerDepth is reached",function(){expect(function(){e([i])}).toThrow("Mixer: the mixer allows a maximum depth of 10")}),it("should pass context to the mixer",function(){e([n],t),expect(s).toHaveBeenCalledWith(n,t)})}),describe(": mixerRecursive",function(){var e,t={},n={mixer:1},r={mixer:2},i={mixer:3},s=jasmine.createSpy("mixer").andCallFake(function(e){if(e==n)return["a","b"];if(e==r)return[n,1];if(e==i)return[i]});beforeEach(module("mixer",function(e){e.value("mixer",s)})),beforeEach(inject(function(t){e=t,s.reset()})),it("should replace all elements with the mixed array",function(){expect(e([n,3,n])).toEqual(["a","b",3,"a","b"])}),it("should mix recursively",function(){expect(e([3,r])).toEqual([3,"a","b",1])}),it("should break recursion when mixerDepth is reached",function(){expect(function(){e([i])}).toThrow("Mixer: the mixer allows a maximum depth of 10")}),it("should pass context to the mixer",function(){e([n],t),expect(s).toHaveBeenCalledWith(n,t)})}),describe(": branching",function(){beforeEach(module("mixer")),describe("mixerDotNotation",function(){var e;beforeEach(inject(function(t){e=t})),it("should return chain if it is not a string",function(){var t={},n=[],r=132.2156;expect(e(r,{global:null})).toBe(r),expect(e(t,{global:null})).toBe(t),expect(e(n,{global:null})).toBe(n)}),it("should return the chain if no dots are present",function(){expect(e("global",{global:null})).toBe("global")}),it("should ignore escaped dots in a literal chain",function(){expect(e("global/.boing",{global:null})).toBe("global.boing")}),it("should use dotNotation to resolve any other strings",function(){expect(e("global.1",{global:[1,234,3]})).toBe(234)})}),describe("mixerCondition",function(){var e,t={global:{123:123,234:234},local:{56:56,78:78}};beforeEach(inject(function(n){e=function(e){return n(e,t)}})),it("should compare two objects",function(){expect(e({compare:[1,3,4],to:[1,3,4]})).toBeTruthy(),expect(e({compare:[1,3,4],to:[1,3]})).not.toBeTruthy()}),it("should compare using dotNotations",function(){expect(e({compare:123,to:"global.123"})).toBeTruthy(),expect(e({compare:"local.56",to:231})).not.toBeTruthy()}),it('should check for truthiness if "to" is not set',function(){expect(e({compare:2})).toBeTruthy(),expect(e({compare:"local.a"})).not.toBeTruthy()}),it("should support an operator function",function(){var n=jasmine.createSpy("operator").andCallFake(function(){return!0});expect(e({compare:1,to:2,operator:n})).toBeTruthy(),expect(n).toHaveBeenCalledWith(1,2,t)}),it("should support the whole condition as a function",function(){var n=jasmine.createSpy("operator").andCallFake(function(){return!0});expect(e(n)).toBeTruthy(),expect(n).toHaveBeenCalledWith(undefined,undefined,t)}),it("should support greaterThan",function(){expect(e({compare:2,to:2,operator:"greaterThan"})).not.toBeTruthy(),expect(e({compare:2,to:1,operator:"greaterThan"})).toBeTruthy(),expect(e({compare:1,to:2,operator:"greaterThan"})).not.toBeTruthy(),expect(e({compare:1,to:"ymu",operator:"greaterThan"})).not.toBeTruthy(),expect(e({compare:1,to:[],operator:"greaterThan"})).not.toBeTruthy(),expect(e({compare:1,to:[2],operator:"greaterThan"})).not.toBeTruthy()}),it("should support greaterThanOrEqual",function(){expect(e({compare:2,to:2,operator:"greaterThanOrEqual"})).toBeTruthy(),expect(e({compare:2,to:1,operator:"greaterThanOrEqual"})).toBeTruthy(),expect(e({compare:1,to:2,operator:"greaterThanOrEqual"})).not.toBeTruthy(),expect(e({compare:1,to:"ymu",operator:"greaterThanOrEqual"})).not.toBeTruthy(),expect(e({compare:1,to:[],operator:"greaterThanOrEqual"})).not.toBeTruthy(),expect(e({compare:1,to:[2],operator:"greaterThanOrEqual"})).not.toBeTruthy()}),it("should support exactly",function(){var t={};expect(e({compare:t,to:t,operator:"exactly"})).toBeTruthy(),expect(e({compare:{},to:{},operator:"exactly"})).not.toBeTruthy()}),it("should support in",function(){expect(e({compare:1,to:[1,2,3],operator:"in"})).toBeTruthy(),expect(e({compare:4,to:[1,2,3],operator:"in"})).not.toBeTruthy(),expect(e({compare:4,to:234,operator:"in"})).not.toBeTruthy()})}),describe(": evaluate",function(){var e;beforeEach(module(function(e){e.value("mixerCondition",function(e){return!!e})})),beforeEach(inject(function(t){e=t})),it("should support AND",function(){expect(e({and:[1,2,3,4]})).toBeTruthy(),expect(e({and:[1,2,0,4]})).not.toBeTruthy()}),it("should support NAND",function(){expect(e({nand:[1,2,3,4]})).not.toBeTruthy(),expect(e({nand:[1,2,0,4]})).toBeTruthy()}),it("should treat arrays as &&",function(){expect(e([1,2,3,4])).toBeTruthy(),expect(e([1,2,0,4])).not.toBeTruthy()}),it("should support OR",function(){expect(e({or:[1,0,0,0]})).toBeTruthy(),expect(e({or:[0,0,0,0]})).not.toBeTruthy()}),it("should support NOR",function(){expect(e({nor:[1,0,0,0]})).not.toBeTruthy(),expect(e({nor:[0,0,0,0]})).toBeTruthy()}),it("should support nested operators",function(){expect(e([{and:[1,1,{or:[0,0]}]}])).not.toBeTruthy(),expect(e([{and:[1,1,{or:[0,0]}]},{nor:[1,1,1,{and:[1,1]}]}])).not.toBeTruthy()})}),describe(": branch",function(){var e;beforeEach(inject(function(t){e=t})),it("should support the branching mixers",function(){expect(e.mixers.branch).toBeDefined(),expect(e.mixers.multiBranch).toBeDefined()}),it("should work",function(){expect(e({mixer:"branch",conditions:[{compare:"global.1",to:2}],data:[4,5,6]},{global:[1,2,3]})).toEqual([4,5,6])}),it("should support the defaultContext",inject(function(t){t.global=[1,2,3],expect(e({mixer:"branch",conditions:[{compare:"global.1",to:2}],data:[4,5,6]})).toEqual([4,5,6]),delete t.global})),it("should support elseData",function(){expect(e({mixer:"branch",conditions:[{compare:"global.2",to:2}],elseData:[7,8,9]},{global:[1,2,3]})).toEqual([7,8,9])})}),describe(": multiBranch",function(){var e;beforeEach(inject(function(t){e=t})),it("should work",function(){expect(e({mixer:"multiBranch",branches:[{conditions:[{}]},{conditions:[{compare:"global.1",to:2}],data:"true"},{conditions:[{compare:"global.1",to:2}],data:"false"},{}],elseData:"else"},{global:[1,2,3]})).toEqual("true")}),it("should support the defaultContext",inject(function(t){t.global=[1,2,3],expect(e({mixer:"multiBranch",branches:[{conditions:[{}]},{conditions:[{compare:"global.1",to:2}],data:"true"},{conditions:[{compare:"global.1",to:2}],data:"false"},{}],elseData:"else"})).toEqual("true"),delete t.global})),it("should support elseData",function(){expect(e({mixer:"multiBranch",branches:[{conditions:[{}]},{conditions:[{compare:"global.1",to:2}],data:"false"},{conditions:[{compare:"global.1",to:2}],data:"false"},{conditions:[{}]}],elseData:"else"},{global:[]})).toEqual("else")})})})})});