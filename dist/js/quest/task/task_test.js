define(["underscore","./task-module"],function(){describe("Task",function(){var e,t=jasmine.createSpy("send"),n=jasmine.createSpy("log"),r=jasmine.createSpy("create"),i=jasmine.createSpy("parse"),s=jasmine.createSpy("next").andReturn("nextObj"),o={sequence:[]};beforeEach(module("task","logger","database",function(e){e.value("Logger",jasmine.createSpy("Logger").andCallFake(function(){this.send=t,this.log=n,this.suppressPulse=jasmine.createSpy("suppressPulse"),this.setSettings=jasmine.createSpy("setSettings")})),e.value("Database",function(){this.createColl=r}),e.value("taskParse",i),e.value("QuestSequence",function(){this.next=function(){return this},this.prev=function(){return this},this.current=s})})),beforeEach(inject(function(t,n){n.current={questions:{}},e=new t(o)})),it("should setup the db",inject(function(t){expect(e.db).toBeDefined(),expect(e.db).toEqual(jasmine.any(t))})),it("should setup the sequence",inject(function(t){expect(e.sequence).toBeDefined(),expect(e.sequence).toEqual(jasmine.any(t))})),it("should setup the logger",inject(function(t){var n={sequence:[],settings:{logger:{a:1}}};e=new t(n),expect(e.logger.setSettings).toHaveBeenCalledWith(n.settings.logger)})),it("should call settings.onEnd at the end of the task (if there is no endObject)",inject(function(t,n){var r={sequence:[],settings:{onEnd:jasmine.createSpy("onEnd")}};e=new t(r),s.andReturn(undefined),e.current(),n.$apply(),expect(r.settings.onEnd).toHaveBeenCalled(),s.andReturn("nextObj")})),it("should log anything left at the end of the task",inject(function(t){t.current.questions={1:{test:1},2:{test:2,$logged:!0}},s.andReturn(undefined),e.current(),t.$apply();var n=t.current.questions[1];expect(e.logger.log.calls.length).toBe(1),expect(e.logger.log).toHaveBeenCalledWith(n,{},undefined),expect(n.$logged).toBeTruthy()})),it("should `send` anything left at the end of the task",inject(function(n){s.andReturn(null),e.current(),n.$apply(),expect(t).toHaveBeenCalled(),expect(e.logger.suppressPulse).toHaveBeenCalled(),s.andReturn("nextObj")})),it("should call `onEnd` only after `send` is called",inject(function(n,r,i){var o=i.defer(),u={sequence:[],settings:{onEnd:jasmine.createSpy("onEnd").andCallFake(function(){expect(t).toHaveBeenCalled()})}};e=new n(u),s.andReturn(undefined),t.andReturn(o.promise),e.current(),r.$apply(),expect(t).toHaveBeenCalled(),expect(u.settings.onEnd).not.toHaveBeenCalled(),o.resolve(),r.$apply(),expect(u.settings.onEnd).toHaveBeenCalled(),s.andReturn("nextObj"),t.andReturn(undefined)})),it("should call the parser",inject(function(e){expect(i).toHaveBeenCalledWith(o,jasmine.any(e))})),it("should log user responses",function(){var t="logContent";e.log(t),expect(n).toHaveBeenCalledWith(t)})}),describe("parser",function(){var e={pages:{},questions:{},sequence:{}},t=jasmine.createSpyObj("db",["createColl","add"]),n=jasmine.createSpyObj("sequence",["add"]);beforeEach(module("task")),beforeEach(inject(function(r){r(e,t,n)})),it("should create the appropriate tables for the db",function(){expect(t.createColl.argsForCall[0]).toEqual(["pages"]),expect(t.createColl.argsForCall[1]).toEqual(["questions"])}),it("should add appropriate elements to the tables",function(){expect(t.add.argsForCall[0]).toEqual(["pages",e.pages]),expect(t.add.argsForCall[1]).toEqual(["questions",e.questions])})}),describe("TaskSequence",function(){var e,t,n,r;beforeEach(module("task",function(e){e.value("templateObj",jasmine.createSpy("templateObj").andCallFake(function(e){return e}))})),beforeEach(inject(function(i,s){r=s,e={inflate:jasmine.createSpy("inflate").andCallFake(function(e,t){return t})},n=function(n){return t=new i("test",n,e)}})),it("should return not truthy when no elements are found",function(){n([]).next(),expect(t.current()).not.toBeDefined()}),it("should support next/prev",function(){n([{test:1},{test:2},{test:3}]).next(),expect(t.current().test).toBe(1),t.next().next(),expect(t.current().test).toBe(3),t.prev(),expect(t.current().test).toBe(2)}),it('should support "all"',function(){var e=[{},{},{}];n(e);var r=t.all();for(var i=0;i<e.length;i++)expect(e[i]).toBe(r[i])}),describe(": inflate",function(){it("should set the inflated element into $inflated",function(){n([{test:1}]);var r=t.next().current();expect(r.$inflated).toBe(r),expect(e.inflate).toHaveBeenCalledWith("test",r)}),it("should inflate an element only once",function(){n([{test:1}]).next(),t.current(),t.current(),expect(e.inflate.calls.length).toBe(1)}),it("should inflate multiple times if reinflate = true",function(){n([{test:1,reinflate:!0}]).next(),t.current(),t.current(),expect(e.inflate.calls.length).toBe(2)})}),describe(": interpolate",function(){it("should set the interpolated element into $inflated",function(){n([{test:1}]).next();var e=t.current();expect(e.$templated).toBe(e),expect(r).toHaveBeenCalledWith(e,jasmine.any(Object))}),it("should interpolate an element only once",function(){n([{test:1}]).next(),t.current(),t.current(),expect(r.calls.length).toBe(1)}),it("should interpolate multiple times if regenerateTemplate = true",function(){n([{test:1,regenerateTemplate:!0}]).next(),t.current(),t.current(),expect(r.calls.length).toBe(2)}),it("should extend the context with metaData and elmData",function(){n([{test:1,regenerateTemplate:!0}]).next(),t.current();var e=r.calls[0].args[1];expect(e.testMeta).toBeDefined(),expect(e.testData).toBeDefined()})})}),describe("QuestSequence",function(){var e,t,n=jasmine.createSpyObj("db",["inflate"]);beforeEach(module("task")),beforeEach(inject(function(r){e=function(e){t=new r(e,n)}})),it("should ",function(){})})});