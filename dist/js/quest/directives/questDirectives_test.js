define(["angular","./questDirectivesModule"],function(e){describe("questController",function(){function o(n,o,u){t.data=n,t.options=u,o&&(t.current.logObj=o),r=e.element('<div quest ng-model="current.logObj" options="options"></div>'),i(r)(t),t.$digest(),s=t.ctrl.log}var t,n,r,i,s;beforeEach(module("questDirectives",function(e,t){e.value("timerNow",function(){return n.shift()}),t.directive("quest",function(e){return{controller:"questController",controllerAs:"ctrl",require:["ngModel"],link:function(t,n,r,i){t.ctrl.registerModel(i[0],e(r.options)(t))}}})})),beforeEach(inject(function(e,r){e.current={questions:{}},t=e.$new(),i=r,n=[0,0,0,0,0]})),it("should expose a value function as well as the scope",function(){o({name:123}),expect(t.ctrl.registerModel).toBeDefined(),expect(t.ctrl.scope).toBe(t),expect(s.name).toEqual(123)}),it("should log a unique serial number for each question",inject(function(e){e.current.questions={a:{},b:{}},o({name:123}),expect(t.ctrl.log.serial).toBe(2)})),it("should bind to a model",inject(function(e){o({}),expect(s.response).toBeNaN(),t.response=123,t.$digest(),expect(s.response).toBe(123),expect(e.current.logObj).toBe(s)})),describe(": decline",function(){it("should decline this question if quest:decline is broadcast",function(){o({}),expect(s.declined).not.toBeTruthy(),t.$emit("quest:decline"),expect(s.declined).toBeTruthy()}),it("should set submitLatency",function(){n=[10,20,40],o({}),t.$emit("quest:decline"),expect(s.submitLatency).toBe(30)})}),describe(": submit",function(){it("should set submitLatency",function(){n=[10,20,40],o({}),t.$emit("quest:submit"),expect(s.submitLatency).toBe(30)}),it("should un-decline a question that is answered",function(){o({}),s.declined=!0,t.$emit("quest:submit"),expect(s.declined).not.toBeTruthy()})}),describe(": defaults",function(){it("should use NaN by default",function(){o({}),expect(s.response).toBeNaN(),expect(t.response).toBeNaN()}),it("should try options.dflt",function(){o({},undefined,{dflt:678}),expect(s.response).toEqual(678),expect(t.response).toBe(s.response)}),it("should try data.dflt",function(){o({dflt:345},undefined,{dflt:456}),expect(s.response).toBe(345),expect(t.response).toBe(s.response)}),it('should use data.dflt event if it is ""',function(){o({dflt:""},undefined,{dflt:456}),expect(s.response).toBe("")})}),it("should load data from ngModel to overide default",function(){o({dflt:123},{response:234}),expect(t.ctrl.log.response).toBe(234),expect(t.response).toBe(234)}),it("should update log latency each time there is a change in scope.response",function(){o({}),n=[10,20],t.$digest(),t.response=Math.random(),t.$digest(),expect(s.latency).toBe(10),expect(s.pristineLatency).toBe(10),t.response=Math.random(),t.$digest(),expect(s.latency).toBe(20),expect(s.pristineLatency).toBe(10)}),describe(": correct validation",function(){it("should work",function(){o({correct:!0,correctValue:123}),expect(r).not.toBeValid(),t.response=123,t.$digest(),expect(r).toBeValid(),t.response=456,t.$digest(),expect(r).not.toBeValid()}),it("should work with 0",function(){o({correct:!0,correctValue:0}),expect(r).not.toBeValid(),t.response="",t.$digest(),expect(r).not.toBeValid(),t.response=0,t.$digest(),expect(r).toBeValid()}),it('should work with ""',function(){o({correct:!0,correctValue:""}),expect(r).not.toBeValid(),t.response=0,t.$digest(),expect(r).not.toBeValid(),t.response="",t.$digest(),expect(r).toBeValid()}),it("should work with numbers",function(){o({correct:!0,correctValue:123}),expect(r).not.toBeValid(),t.response="123",t.$digest(),expect(r).toBeValid()}),it("should support arrays",function(){o({correct:!0,correctValue:[1,2,3]}),t.response=[1,2,3],t.$digest(),expect(r).toBeValid()})})})});