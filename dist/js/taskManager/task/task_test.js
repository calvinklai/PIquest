define(["require","angular","./taskModule"],function(e,t){describe("task",function(){beforeEach(module("pi.task")),describe("getScript",function(){var t=e.toUrl(".")+"/test/script1.js",n,r,i;beforeEach(inject(function(e,t){r=e,i=t})),it("should return a promise",function(){n=r(t),expect(n.then).toBeDefined()}),it("should support base_url",function(){})}),describe("taskLoad",function(){var e,t,n;beforeEach(module(function(t){t.value("taskGetScript",function(){return e.promise})})),beforeEach(inject(function(r,i,s){n=s,t=i,e=r.defer()})),it("should return a resolved promise for a script",function(){var e={test:1},r=jasmine.createSpy("then");t({script:e}).then(r),n.$digest(),expect(r).toHaveBeenCalledWith(e)}),it("should return an unresolved promise for scriptUrl",function(){var r={test:1},i=jasmine.createSpy("then");t({scriptUrl:r}).then(i),n.$digest(),expect(i).not.toHaveBeenCalledWith(r),e.resolve(r),n.$digest(),expect(i).toHaveBeenCalledWith(r)}),it("should throw if both script and scriptUrl are not set",function(){expect(function(){t({})}).toThrow()})}),describe("taskActivate",function(){var e,t;beforeEach(module(function(e){t=jasmine.createSpy("test"),e.set("test",t)})),beforeEach(inject(function(t){e=t})),it('should run a "function" script',function(){var t=jasmine.createSpy("task");e({$script:t},"el","scope"),expect(t).toHaveBeenCalled()}),it("should run a script.play function",function(){var t=jasmine.createSpy("task").andCallFake(function(){expect(this).toBe(n)}),n={play:t};e({$script:n},"el","scope"),expect(t).toHaveBeenCalled()}),it("should run as script by task.type",function(){e({type:"test"},"el","scope"),expect(t).toHaveBeenCalled()}),it("should resolve when the callback is called",inject(function(t){var n=jasmine.createSpy("then"),r;e({$script:function(e){r=e}},"el","scope").then(n),t.$digest(),expect(n).not.toHaveBeenCalled(),r(),t.$digest(),expect(n).toHaveBeenCalled()})),it("should invoke the activator with relevant locals",inject(function(t){function i(e,i,s,o,u){n(),expect(e).toBe("scope"),expect(i).toBe("element"),expect(s).toBe(t.global),expect(o).toBe(r),expect(u).toBe(r.$script)}t.global={};var n=jasmine.createSpy("activator"),r;r={$script:i},e(r,"element","scope"),expect(n).toHaveBeenCalled()}))}),xdescribe("taskDirective",function(){var e,n,r,i,s;beforeEach(module(function(t){t.value("taskLoad",function(){return e.promise}),t.value("taskActivate",function(){return n.promise})})),beforeEach(inject(function(o,u,a){s=t.element('<div pi-task="task" ></div>'),e=a.defer(),n=a.defer(),i=function(e){var t=u.$new();t.task=e,o(s)(t),t.$digest(),r=s.isolateScope()}})),it("should set $script.loading correctly",function(){i({}),expect(r.loading).toBeTruthy(),e.resolve(),r.$digest(),expect(r.loading).not.toBeTruthy()}),it('should activate "pre"',function(){var t=jasmine.createSpy("pre");i({pre:t}),e.resolve(),r.$digest(),expect(t).toHaveBeenCalled()}),it('should activate "post"',function(){var t=jasmine.createSpy("post");i({post:t}),e.resolve(),n.resolve(),r.$digest(),expect(t).toHaveBeenCalled()}),it('should emit "task:end" at the end of the task',inject(function(t){var r=jasmine.createSpy("post");t.$on("task:end",r),i({}),e.resolve(),n.resolve(),t.$digest(),expect(r).toHaveBeenCalled()}))})})});