define(["./managerModule"],function(){xdescribe("manager",function(){beforeEach(module("taskManager")),describe(": directive",function(){function o(){t=n('<div pi-task="my/url.js", pi-global="globalObj"></div>')(r)}var e,t,n,r,i,s;beforeEach(module(function(t){i=jasmine.createSpy("getScript"),t.service("managerGetScript",function(t){return i.andCallFake(function(){return e=t.defer(),e.promise})})})),beforeEach(inject(function(e){n=e.get("$compile"),s=e.get("$window"),r=e.get("$rootScope").$new(),o()})),it("should create a quest element",function(){e.resolve({}),r.$apply(),expect(t.find("[pi-quest]").length).toBe(1)}),it("should have the script set in the scope",function(){e.resolve(123),r.$apply(),expect(t.scope().script).toBe(123)}),it("should create the directive only after the script is loaded",function(){expect(t.find("[pi-quest]").length).toBe(0),expect(t.scope().script).not.toBeDefined(),e.resolve(123),r.$apply(),expect(t.find("[pi-quest]").length).toBe(1),expect(t.scope().script).toBe(123)}),it("should get its url from the attribute",function(){expect(i).toHaveBeenCalledWith("my/url.js")}),it("should create a global object and set it to the scope",inject(function(e){expect(e.global).toEqual(jasmine.any(Object))})),it('should extend the global object with "pi-global"',inject(function(e){s.globalObj={extendGlobal:!0},o(),expect(e.global.extendGlobal).toBeTruthy()}))})})});