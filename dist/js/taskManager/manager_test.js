define(["./managerModule"],function(){describe("manager",function(){beforeEach(module("taskManager")),describe("managerProvider",function(){var e,t,n;beforeEach(module(function(e){e.service("taskLoad",function(e){return n=e.defer(),function(){return n.promise}}),e.value("managerSequence",function t(){if(!(this instanceof t))return new t;this.next=jasmine.createSpy("next"),this.prev=jasmine.createSpy("prev")})})),beforeEach(inject(function(n,r){t=n.$new(),e=r(t,{})})),describe(": constructor",function(){it("should return an object (no need for new)",function(){expect(e).toEqual(jasmine.any(Object))}),it("should create a sequence",inject(function(t){expect(e.sequence).toEqual(jasmine.any(t))})),it("should call next on manager:next",function(){spyOn(e,"next"),t.$emit("manager:next"),t.$digest(),expect(e.next).toHaveBeenCalled()}),it("should call prev on manager:prev",function(){spyOn(e,"prev"),t.$emit("manager:prev"),t.$digest(),expect(e.prev).toHaveBeenCalled()})}),describe(": prototype",function(){it("should proceed and load for next",function(){spyOn(e,"load"),e.next(),expect(e.sequence.next).toHaveBeenCalled(),expect(e.load).toHaveBeenCalled()}),it("should proceed and load for prev",function(){spyOn(e,"load"),e.prev(),expect(e.sequence.prev).toHaveBeenCalled(),expect(e.load).toHaveBeenCalled()}),it("should emit manager:loaded only after loading is done",function(){var r=jasmine.createSpy("loaded");t.$on("manager:loaded",r),e.load(),t.$digest(),expect(r).not.toHaveBeenCalled(),n.resolve(),t.$digest(),expect(r).toHaveBeenCalled()})})}),describe("managerSequence",function(){var e,t;beforeEach(module(function(e){e.value("Database",function(){this.add=jasmine.createSpy("add"),this.createColl=jasmine.createSpy("createColl")}),e.value("TaskSequence",function(){this.args=[arguments[0],arguments[1],arguments[2]],this.next=jasmine.createSpy("next"),this.prev=jasmine.createSpy("prev"),this.current=jasmine.createSpy("current")})})),beforeEach(inject(function(n){t={tasks:{},sequence:[]},e=n(t)})),it("should create a db correctly",function(){expect(e.db).toEqual(jasmine.any(Object)),expect(e.db.createColl).toHaveBeenCalledWith("tasks"),expect(e.db.add).toHaveBeenCalledWith("tasks",t.tasks)}),it("should create a taskSequence correctly",inject(function(n){expect(e.sequence).toEqual(jasmine.any(n)),expect(e.sequence.args).toEqual(["tasks",t.sequence,e.db])})),it("should call next",function(){e.next(),expect(e.sequence.next).toHaveBeenCalled()}),it("should call prev",function(){e.prev(),expect(e.sequence.prev).toHaveBeenCalled()}),it("should call current",function(){e.current(),expect(e.sequence.current).toHaveBeenCalled()})})})});