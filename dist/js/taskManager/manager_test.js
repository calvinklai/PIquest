define(["require","./managerModule"],function(e){var t=e("angular");describe("manager",function(){beforeEach(module("taskManager")),describe("managerService",function(){var e,t,n;beforeEach(module(function(e){e.service("managerTaskLoad",function(e){return n=e.defer(),function(){return n.promise}}),e.value("managerSequence",function(){this.next=jasmine.createSpy("next"),this.prev=jasmine.createSpy("prev"),this.current=jasmine.createSpy("current")})})),beforeEach(inject(function(n,r){t=n.$new(),e=r(t,{})})),it("should return an object (no need for new)",function(){expect(e).toEqual(jasmine.any(Object))}),it("should create a sequence",inject(function(t){expect(e.sequence).toEqual(jasmine.any(t))})),it("should call next on manager:next",function(){spyOn(e,"next"),t.$emit("manager:next"),t.$digest(),expect(e.next).toHaveBeenCalled()}),it("should call prev on manager:prev",function(){spyOn(e,"prev"),t.$emit("manager:prev"),t.$digest(),expect(e.prev).toHaveBeenCalled()}),it("should proceed and load for next",function(){spyOn(e,"load"),e.next(),expect(e.sequence.next).toHaveBeenCalled(),expect(e.load).toHaveBeenCalled()}),it("should proceed and load for prev",function(){spyOn(e,"load"),e.prev(),expect(e.sequence.prev).toHaveBeenCalled(),expect(e.load).toHaveBeenCalled()}),it("should emit manager:loaded after loading is done",function(){var r=jasmine.createSpy("loaded");t.$on("manager:loaded",r),spyOn(e,"current"),e.current.andReturn({}),e.load(),t.$digest(),expect(r).not.toHaveBeenCalled(),n.resolve(),t.$digest(),expect(r).toHaveBeenCalled()}),it("should emit manager:loaded if task is empty (end of sequence)",function(){var n=jasmine.createSpy("loaded");t.$on("manager:loaded",n),e.load(),t.$digest(),expect(n).toHaveBeenCalled()})}),describe("managerSequence",function(){var e,t;beforeEach(module(function(e){e.value("Database",function(){this.add=jasmine.createSpy("add"),this.createColl=jasmine.createSpy("createColl")}),e.value("TaskSequence",function(){this.args=[arguments[0],arguments[1],arguments[2]],this.next=jasmine.createSpy("next"),this.prev=jasmine.createSpy("prev"),this.current=jasmine.createSpy("current")})})),beforeEach(inject(function(n){t={tasks:{},sequence:[]},e=n(t)})),it("should create a db correctly",function(){expect(e.db).toEqual(jasmine.any(Object)),expect(e.db.createColl).toHaveBeenCalledWith("tasks"),expect(e.db.add).toHaveBeenCalledWith("tasks",t.tasks)}),it("should create a taskSequence correctly",inject(function(n){expect(e.sequence).toEqual(jasmine.any(n)),expect(e.sequence.args).toEqual(["tasks",t.sequence,e.db])})),it("should call next",function(){e.next(),expect(e.sequence.next).toHaveBeenCalled()}),it("should call prev",function(){e.prev(),expect(e.sequence.prev).toHaveBeenCalled()}),it("should call current",function(){e.current(),expect(e.sequence.current).toHaveBeenCalled()})}),describe("managerDirective",function(){function u(s){var u=t.isString(s)?s:t.toJson(s||{}),a='<div pi-manager="'+u+'"></div>';n=t.element(a),r(n)(i),e.resolve(s),i.$digest(),o=n.controller("piSwap")}var e,n,r,i,s,o;beforeEach(module(function(t,n){n.directive("piSwap",function(){return{priority:9999,terminal:!0,controller:function(){this.next=jasmine.createSpy("next"),this.empty=jasmine.createSpy("empty")}}}),t.value("managerLoad",jasmine.createSpy("managerLoad").andCallFake(function(){return e.promise})),s=jasmine.createSpy("current").andReturn({}),t.value("managerService",jasmine.createSpy("managerService").andCallFake(function(){this.current=s}))})),beforeEach(inject(function(t){e=t.get("$q").defer(),r=t.get("$compile"),i=t.get("$rootScope").$new()})),describe(": setup",function(){it("should load a url from attr.piManager",inject(function(e){u("abc"),expect(e).toHaveBeenCalledWith("abc")})),it("should load an object from attr.piManager",inject(function(e){u("{a:1}"),expect(e).toHaveBeenCalledWith({a:1})})),it("should create a sequence",inject(function(e){u(),expect(e).toHaveBeenCalled()})),it("should emit manager:next at startup",function(){var e=jasmine.createSpy("next");i.$on("manager:next",e),u(),expect(e).toHaveBeenCalled()})}),describe(": loaded->proceed",function(){it("should apply the appropriate post",function(){var e=jasmine.createSpy("post");u(),s.andReturn({post:e}),i.$emit("manager:loaded"),i.$digest(),expect(e).not.toHaveBeenCalled(),s.andReturn({}),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalled()}),it("should invoke onPreTask with task info",function(){var e=jasmine.createSpy("preTask"),t={name:"123"};e.$inject=["currentTask"],u(),i.settings={onPreTask:e},s.andReturn(t),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalledWith(t)}),it("should apply post after preTask",function(){var e=jasmine.createSpy("post"),t=jasmine.createSpy("preTask").andCallFake(function(){expect(e).not.toHaveBeenCalled()});u(),s.andReturn({post:e}),i.settings={onPreTask:t},i.$emit("manager:loaded"),i.$digest(),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalled(),expect(t).toHaveBeenCalled()}),it("should apply pre after post",function(){var e=jasmine.createSpy("pre"),t=jasmine.createSpy("post").andCallFake(function(){expect(e).not.toHaveBeenCalled()});u(),s.andReturn({post:t}),i.$emit("manager:loaded"),i.$digest(),s.andReturn({pre:e}),i.$emit("manager:loaded"),i.$digest(),expect(t).toHaveBeenCalled(),expect(e).toHaveBeenCalled()}),it("should call swap.next after pre",function(){var e=jasmine.createSpy("pre").andCallFake(function(){expect(o.next).not.toHaveBeenCalled()});u(),s.andReturn({pre:e}),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalled(),expect(o.next).toHaveBeenCalled()})}),describe(": loaded->done",function(){it("should apply the appropriate post",function(){var e=jasmine.createSpy("post");u(),s.andReturn({post:e}),i.$emit("manager:loaded"),i.$digest(),expect(e).not.toHaveBeenCalled(),s.andReturn(undefined),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalled()}),it("should call swap.empty after post",function(){var e=jasmine.createSpy("post").andCallFake(function(){expect(o.empty).not.toHaveBeenCalled()});u(),s.andReturn({post:e}),i.$emit("manager:loaded"),i.$digest(),s.andReturn(undefined),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalled(),expect(o.empty).toHaveBeenCalled()}),it("should call manager.onEnd",function(){var e=jasmine.createSpy("onEnd").andCallFake(function(){expect(o.empty).toHaveBeenCalled()});u(),i.settings={onEnd:e},s.andReturn(undefined),i.$emit("manager:loaded"),i.$digest(),expect(e).toHaveBeenCalled()}),it("should emit manager:done",function(){var e=jasmine.createSpy("onEnd"),t=jasmine.createSpy("manager:done").andCallFake(function(){expect(e).toHaveBeenCalled()});u(),i.settings={onEnd:e},s.andReturn(undefined),i.$on("manager:done",t),i.$emit("manager:loaded"),i.$digest(),expect(t).toHaveBeenCalled()})}),describe(": task listeners",function(){it("should not propagate manager:next up",inject(function(e){var t=jasmine.createSpy("next");u({}),e.$on("manager:next",t),i.$emit("task:done"),expect(t).toHaveBeenCalled()})),it("should trigger a manager:next event",function(){var e=jasmine.createSpy("next");u({}),i.$on("manager:next",e),i.$emit("task:done"),expect(e).toHaveBeenCalled()})})}),describe("getScript",function(){var t=e.toUrl(".")+"/test/script1.js",n,r,i;beforeEach(inject(function(e,t){r=e,i=t})),it("should return a promise",function(){n=r(t),expect(n.then).toBeDefined()})}),describe("managerLoad",function(){var e,t,n,r;beforeEach(module(function(t){t.value("managerGetScript",jasmine.createSpy("getScript").andCallFake(function(){return e.promise}))})),beforeEach(inject(function(i){r=i.get("$rootScope"),e=i.get("$q").defer(),t=i.get("managerLoad"),n=jasmine.createSpy("loaded")})),it("should return a resolved promise for nonstring",function(){t({}).then(n),r.$digest(),expect(n).toHaveBeenCalled()}),it("should getScript the url",inject(function(e){t("my/url"),expect(e).toHaveBeenCalledWith("my/url")})),it("should return a promise for a string",function(){t("my/url").then(n),r.$digest(),expect(n).not.toHaveBeenCalled(),e.resolve(),r.$digest(),expect(n).toHaveBeenCalled()})}),describe("managerTaskLoad",function(){var e,t,n;beforeEach(module(function(t){t.value("managerGetScript",function(){return e.promise})})),beforeEach(inject(function(r,i,s){n=s,t=i,e=r.defer()})),it("should return a resolved promise for a script",function(){var e={test:1},r=jasmine.createSpy("then");t({script:e}).then(r),n.$digest(),expect(r).toHaveBeenCalled()}),it("should return an unresolved promise for scriptUrl",function(){var r={test:1},i=jasmine.createSpy("then");t({scriptUrl:r}).then(i),n.$digest(),expect(i).not.toHaveBeenCalled(),e.resolve(r),n.$digest(),expect(i).toHaveBeenCalled()}),it("should throw if both script and scriptUrl are not set",function(){expect(function(){t({})}).toThrow()}),it("should extend the task with $script and $template",function(){var e={script:123,template:345};t(e),n.$digest(),expect(e.$script).toBe(123),expect(e.$template).toBe(345)})})})});