{"version":3,"file":"API.js","sources":["API.js"],"names":[],"mappings":"AAIA,OAAA,WAAA,UAAA,cAAA,SAAA,GAQA,QAAA,GAAA,GACA,KAAA,QACA,UACA,WACA,aACA,gBACA,aACA,aAGA,KAAA,OAAA,KAAA,GAAA,gBAEA,KAAA,SAAA,KAAA,OAAA,UACA,QACA,SAAA,IACA,YAAA,IAEA,UAoFA,QAAA,GAAA,GAiBA,QAAA,GAAA,EAAA,GAEA,GAEA,GAFA,EAAA,KAAA,OAAA,EAAA,UAAA,KAAA,OAAA,EAAA,WAIA,IAAA,EAAA,cAAA,GACA,EAAA,MAAA,EAAA,OAUA,KAJA,EAAA,QAAA,KAAA,GAAA,IACA,EAAA,KAAA,EAAA,OAGA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,KAAA,EAAA,aA9IA,GAAA,GAAA,EAAA,aAoGA,OAzEA,GAAA,OAAA,EAAA,WAGA,aAAA,EAAA,SACA,gBAAA,EAAA,YACA,aAAA,EAAA,SAGA,YAAA,SAAA,EAAA,GACA,GAAA,EASA,OAPA,GAAA,cAAA,IACA,EAAA,KAAA,SAAA,GAAA,KAAA,SAAA,OACA,EAAA,OAAA,EAAA,IAEA,KAAA,SAAA,GAAA,EAGA,MAGA,YAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAKA,OAJA,GAAA,QAAA,KAAA,GAAA,IAEA,EAAA,SAAA,EAAA,SAAA,OAAA,GAEA,MAGA,UAAA,SAAA,GACA,IAAA,EAAA,cAAA,GACA,KAAA,IAAA,OAAA,2BAEA,GAAA,MAAA,KAAA,SAAA,IAGA,UAAA,WACA,MAAA,QAAA,UAGA,WAAA,SAAA,GACA,IAAA,EAAA,cAAA,GACA,KAAA,IAAA,OAAA,4BAEA,GAAA,MAAA,KAAA,OAAA,QAAA,IAGA,WAAA,WACA,MAAA,MAAA,OAAA,SAIA,UAAA,SAAA,GACA,EAAA,MAAA,KAAA,OAAA,IAIA,UAAA,WACA,MAAA,MAAA,QAGA,QAAA,WACA,MAAA,MAAA,OAAA,QAAA,MAIA,KAAA,WACA,KAAA,IAAA,OAAA,mEAKA","sourcesContent":["define('app/API',['require','underscore'],function(require){\n\n\tvar _ = require('underscore');\n\n\t/**\n\t * Constructor for PIPlayer script creator\n\t * @return {Object}\t\tScript creator\n\t */\n\tfunction API(name){\n\t\tthis.script = {\n\t\t\tglobal: {}, // the real global should be extended with this\n\t\t\tcurrent: {}, // this is the actual namespace for this PIP\n\t\t\ttrialSets: {},\n\t\t\tstimulusSets: {},\n\t\t\tmediaSets: {},\n\t\t\tsequence: []\n\t\t};\n\n\t\tthis.script.name = name || 'anonymous PIP';\n\n\t\tthis.settings = this.script.settings = {\n\t\t\tcanvas: {\n\t\t\t\tmaxWidth: 800,\n\t\t\t\tproportions: 0.8\n\t\t\t},\n\t\t\thooks: {}\n\t\t};\n\t}\n\n\t_.extend(API.prototype, {\n\n\t\t// add set function\n\t\taddTrialSets: add_set('trial'),\n\t\taddStimulusSets: add_set('stimulus'),\n\t\taddMediaSets: add_set('media'),\n\n\t\t// settings\n\t\taddSettings: function(name, settingsObj){\n\t\t\tvar settings;\n\n\t\t\tif (_.isPlainObject(settingsObj)){\n\t\t\t\tsettings = this.settings[name] = this.settings[name] || {};\n\t\t\t\t_.extend(settings, settingsObj);\n\t\t\t} else {\n\t\t\t\tthis.settings[name] = settingsObj;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\taddSequence: function(sequence){\n\t\t\tvar script = this.script;\n\t\t\t_.isArray(sequence) || (sequence = [sequence]);\n\n\t\t\tscript.sequence = script.sequence.concat(sequence);\n\n\t\t\treturn this;\n\t\t},\n\n\t\taddGlobal: function(global){\n\t\t\tif (!_.isPlainObject(global)){\n\t\t\t\tthrow new Error('global must be an object');\n\t\t\t}\n\t\t\t_.merge(this.global(), global);\n\t\t},\n\n\t\tgetGlobal: function(){\n\t\t\treturn window.piGlobal;\n\t\t},\n\n\t\taddCurrent: function(current){\n\t\t\tif (!_.isPlainObject(current)){\n\t\t\t\tthrow new Error('current must be an object');\n\t\t\t}\n\t\t\t_.merge(this.script.current, current);\n\t\t},\n\n\t\tgetCurrent: function(){\n\t\t\treturn this.script.current;\n\t\t},\n\n\t\t// push a whole script\n\t\taddScript: function(obj){\n\t\t\t_.merge(this.script,obj);\n\t\t},\n\n\t\t// returns script (for debuging probably)\n\t\tgetScript: function(){\n\t\t\treturn this.script;\n\t\t},\n\n\t\tgetLogs: function(){\n\t\t\treturn this.script.current.logs;\n\t\t},\n\n\t\t// run the player, returns deferred\n\t\tplay: function(){\n\t\t\tthrow new Error('you should return API.script instead of calling API.play()!!');\n\t\t}\n\n\t});\n\n\treturn API;\n\n\t /**\n\t  * Create a function that adds sets of a scpecific type\n\t  * @param {String} type  \tThe type of set setter to create\n\t  * @returns {Function} \tA setter object\n\t  */\n\tfunction add_set(type){\n\n\t\t/**\n\t\t * Adds a set to the targetSet\n\t\t * @param {String, Object} set    \tEither full set object, or the name of this setArr\n\t\t * @param {Array} setArr \t\t\tAn array of objects for this set\n\t\t * @returns {Object} The API object\n\t\t *\n\t\t * use examples:\n\t\t * fn({\n\t\t *   intro: [intro1, intro2],\n\t\t *   Default: [defaultTrial]\n\t\t * })\n\t\t * fn('intro',[intro1, intro2])\n\t\t * fn('Default',defaultTrial)\n\t\t *\n\t\t */\n\t\tfunction setSetter(set, setArr){\n\t\t\t// get the sets we want to extend (or create them)\n\t\t\tvar targetSets = this.script[type + \"Sets\"] || (this.script[type + \"Sets\"] = {});\n\n\t\t\tvar i;\n\t\t\t// if we get an explicit object, simply extend the set\n\t\t\tif (_.isPlainObject(set)) {\n\t\t\t\t_.merge(targetSets, set);\n\t\t\t}\n\n\t\t\t// if we got a named object\n\t\t\telse {\n\t\t\t\t// make sure the objects to add are wrapped in an array\n\t\t\t\t_.isArray(setArr) || (setArr = [setArr]);\n\t\t\t\ttargetSets[set] || (targetSets[set] = []);\n\n\t\t\t\t// merge the objects into the targetSet\n\t\t\t\tfor (i=0;i<setArr.length; i++){\n\t\t\t\t\ttargetSets[set].push(setArr[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn setSetter;\n\t}\n});\n"]}